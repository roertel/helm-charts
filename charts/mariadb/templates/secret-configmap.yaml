# For this to work, all manifests that need the secret must be in the same template file.
# Pull the default secret dictionary, returning an empty dict if there is none.
{{- $secretDict := (lookup "v1" "Secret" .Release.Namespace (include "mariadb.fullname" .)) | default dict }}
{{- $secretPass := get (get $secretDict "data" | default dict) "mariadb-root-password" | b64dec }}
# Set password from config values, existing secret or generate one if none exists or were provided.
{{- $rootPassword := .Values.mysqld.rootPassword | default $secretPass | default (randAlphaNum 32) }}

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "mariadb.fullname" . }}-server
  labels:
    {{- include "mariadb.labels" . | nindent 4 }}
data:
  my.cnf: |
    [mysqld]
    {{- if .Values.tls.enabled }}
    ssl-ca = /run/tls/cacert.pem
    ssl-cert = /run/tls/server-cert.pem
    ssl-key = /run/tls/server-key.pem
    {{- if .Values.tls.required }}
    require-secure-transport = on
    {{- end }}
    tls-version = {{ .Values.tls.versions | default "TLSv1.2,TLSv1.3" }}
    {{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "mariadb.fullname" . }}-client
  labels:
    {{- include "mariadb.labels" . | nindent 4 }}
data:
  .my.cnf: |
    [client]
    user = root
    password = {{ $rootPassword | quote }}
---
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: {{ include "mariadb.fullname" . }}
  labels:
    {{- include "mariadb.labels" . | nindent 4 }}
data:
  mariadb-root-password: {{ $rootPassword | b64enc | quote }}
