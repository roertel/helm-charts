# Default values for pytivo.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: justintime/pytivo
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

servicePort: 80  # Port which pyTivo uses to serve files and present a browsing
                 # interface. This must match the K8s service port or else the
                 # mDNS broadcast will broadcast the wrong port to the TiVo.

service:
  type: ClusterIP
  port: 80  # This must match the port inside the container or else the mDNS
            # broadcast will broadcast the wrong port to the TiVo.

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: pytivo.local
      paths:
      - path: /
        backend:
          serviceName: pytivo.local
          servicePort: 80
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

mediaMount: {}
# nfs:
#   server: "servername"
#   path: /TiVo


resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# Swith the container to one of your shares to test NFS, for example
healthProbePath: "/TiVoConnect?Command=QueryContainer&container=/NowPlaying"

config:
  server:
    Server:
      port: 80
      nosettings: true
  shares: {}  # Example setup
    # Movies:
    #   type: video
    #   path: /media/Movies
    # Shows:
    #   type: video
    #   path: /media/Shows
    # Videos:
    #   type: video
    #   path: /media/Videos

secret: {}
#  pyTivo:
#    Server:
#      tivo_mak: ####
#      tivo_username: user@host.tld
#      tivo_password: password
